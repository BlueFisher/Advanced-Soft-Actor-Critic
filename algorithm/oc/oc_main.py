import importlib.util
import logging
import shutil
from collections import defaultdict
from pathlib import Path
from typing import Dict

import numpy as np

from .. import sac_main
from ..sac_main import Main
from ..utils import UnifiedElapsedTimer, format_global_step
from ..utils.enums import *
from .oc_agent import OC_MultiAgentsManager
from .option_selector_base import OptionSelectorBase

sac_main.MultiAgentsManager = OC_MultiAgentsManager


class OC_Main(Main):
    ma_manager: OC_MultiAgentsManager

    def __init__(self, root_dir, config_dir, args):
        """
        config_path: the directory of config file
        args: command arguments generated by argparse
        """
        self._logger = logging.getLogger('oc')

        self._profiler = UnifiedElapsedTimer(self._logger)

        config_abs_dir = self._init_config(root_dir, config_dir, args)

        self._init_env()
        self._init_oc(config_abs_dir)

        self._run()

    def _init_oc(self, config_abs_dir: Path):
        for n, mgr in self.ma_manager:
            # If nn models exists, load saved model, or copy a new one
            saved_nn_abs_path = mgr.model_abs_dir / 'saved_nn.py'
            if not self.alway_use_env_nn and saved_nn_abs_path.exists():
                spec = importlib.util.spec_from_file_location('nn', str(saved_nn_abs_path))
                self._logger.info(f'Loaded nn from existed {saved_nn_abs_path}')
            else:
                nn_abs_path = config_abs_dir / f'{mgr.config["sac_config"]["nn"]}.py'

                spec = importlib.util.spec_from_file_location('nn', str(nn_abs_path))
                self._logger.info(f'Loaded nn in env dir: {nn_abs_path}')
                if not self.alway_use_env_nn:
                    shutil.copyfile(nn_abs_path, saved_nn_abs_path)

            nn = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(nn)
            mgr.config['sac_config']['nn'] = nn

            mgr.set_rl(OptionSelectorBase(obs_names=mgr.obs_names,
                                          obs_shapes=mgr.obs_shapes,
                                          d_action_sizes=mgr.d_action_sizes,
                                          c_action_size=mgr.c_action_size,
                                          model_abs_dir=mgr.model_abs_dir,
                                          device=self.device,
                                          ma_name=None if len(self.ma_manager) == 1 else n,
                                          train_mode=self.train_mode,
                                          last_ckpt=self.last_ckpt,

                                          nn_config=mgr.config['nn_config'],
                                          **mgr.config['sac_config'],

                                          **mgr.config['oc_config'],

                                          replay_config=mgr.config['replay_config']))

    def _extra_step(self,
                    ma_d_action: Dict[str, np.ndarray],
                    ma_c_action: Dict[str, np.ndarray]):
        if not self.train_mode:
            ma_option = self.ma_manager.get_option()

            # TODO multiple agent options
            ma_option = {n: int(option[0]) for n, option in ma_option.items()}
            self.env.send_option(ma_option)
