# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import learner_pb2 as learner__pb2
import ndarray_pb2 as ndarray__pb2
import pingpong_pb2 as pingpong__pb2


class LearnerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Persistence = channel.stream_stream(
                '/LearnerService/Persistence',
                request_serializer=pingpong__pb2.Ping.SerializeToString,
                response_deserializer=pingpong__pb2.Pong.FromString,
                )
        self.GetReplay = channel.unary_unary(
                '/LearnerService/GetReplay',
                request_serializer=ndarray__pb2.Empty.SerializeToString,
                response_deserializer=learner__pb2.Replay.FromString,
                )
        self.GetAction = channel.unary_unary(
                '/LearnerService/GetAction',
                request_serializer=learner__pb2.GetActionRequest.SerializeToString,
                response_deserializer=learner__pb2.Action.FromString,
                )
        self.GetPolicyVariables = channel.unary_unary(
                '/LearnerService/GetPolicyVariables',
                request_serializer=ndarray__pb2.Empty.SerializeToString,
                response_deserializer=learner__pb2.NNVariables.FromString,
                )
        self.GetTDError = channel.unary_unary(
                '/LearnerService/GetTDError',
                request_serializer=learner__pb2.GetTDErrorRequest.SerializeToString,
                response_deserializer=learner__pb2.TDError.FromString,
                )
        self.PostRewards = channel.unary_unary(
                '/LearnerService/PostRewards',
                request_serializer=learner__pb2.PostRewardsToLearnerRequest.SerializeToString,
                response_deserializer=ndarray__pb2.Empty.FromString,
                )
        self.GetNNVariables = channel.unary_unary(
                '/LearnerService/GetNNVariables',
                request_serializer=ndarray__pb2.Empty.SerializeToString,
                response_deserializer=learner__pb2.NNVariables.FromString,
                )
        self.UpdateNNVariables = channel.unary_unary(
                '/LearnerService/UpdateNNVariables',
                request_serializer=learner__pb2.NNVariables.SerializeToString,
                response_deserializer=ndarray__pb2.Empty.FromString,
                )


class LearnerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Persistence(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReplay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicyVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTDError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostRewards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNNVariables(self, request, context):
        """Update variables from evolver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNNVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Persistence': grpc.stream_stream_rpc_method_handler(
                    servicer.Persistence,
                    request_deserializer=pingpong__pb2.Ping.FromString,
                    response_serializer=pingpong__pb2.Pong.SerializeToString,
            ),
            'GetReplay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReplay,
                    request_deserializer=ndarray__pb2.Empty.FromString,
                    response_serializer=learner__pb2.Replay.SerializeToString,
            ),
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=learner__pb2.GetActionRequest.FromString,
                    response_serializer=learner__pb2.Action.SerializeToString,
            ),
            'GetPolicyVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicyVariables,
                    request_deserializer=ndarray__pb2.Empty.FromString,
                    response_serializer=learner__pb2.NNVariables.SerializeToString,
            ),
            'GetTDError': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTDError,
                    request_deserializer=learner__pb2.GetTDErrorRequest.FromString,
                    response_serializer=learner__pb2.TDError.SerializeToString,
            ),
            'PostRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.PostRewards,
                    request_deserializer=learner__pb2.PostRewardsToLearnerRequest.FromString,
                    response_serializer=ndarray__pb2.Empty.SerializeToString,
            ),
            'GetNNVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNNVariables,
                    request_deserializer=ndarray__pb2.Empty.FromString,
                    response_serializer=learner__pb2.NNVariables.SerializeToString,
            ),
            'UpdateNNVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNNVariables,
                    request_deserializer=learner__pb2.NNVariables.FromString,
                    response_serializer=ndarray__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LearnerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LearnerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Persistence(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/LearnerService/Persistence',
            pingpong__pb2.Ping.SerializeToString,
            pingpong__pb2.Pong.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReplay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/GetReplay',
            ndarray__pb2.Empty.SerializeToString,
            learner__pb2.Replay.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/GetAction',
            learner__pb2.GetActionRequest.SerializeToString,
            learner__pb2.Action.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPolicyVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/GetPolicyVariables',
            ndarray__pb2.Empty.SerializeToString,
            learner__pb2.NNVariables.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTDError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/GetTDError',
            learner__pb2.GetTDErrorRequest.SerializeToString,
            learner__pb2.TDError.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/PostRewards',
            learner__pb2.PostRewardsToLearnerRequest.SerializeToString,
            ndarray__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNNVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/GetNNVariables',
            ndarray__pb2.Empty.SerializeToString,
            learner__pb2.NNVariables.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateNNVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearnerService/UpdateNNVariables',
            learner__pb2.NNVariables.SerializeToString,
            ndarray__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
