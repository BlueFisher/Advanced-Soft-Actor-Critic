# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import evolver_pb2 as evolver__pb2
import ndarray_pb2 as ndarray__pb2
import pingpong_pb2 as pingpong__pb2


class EvolverServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Persistence = channel.stream_stream(
                '/EvolverService/Persistence',
                request_serializer=pingpong__pb2.Ping.SerializeToString,
                response_deserializer=pingpong__pb2.Pong.FromString,
                )
        self.RegisterLearner = channel.unary_unary(
                '/EvolverService/RegisterLearner',
                request_serializer=evolver__pb2.RegisterLearnerRequest.SerializeToString,
                response_deserializer=evolver__pb2.RegisterLearnerResponse.FromString,
                )
        self.RegisterActor = channel.unary_unary(
                '/EvolverService/RegisterActor',
                request_serializer=ndarray__pb2.Empty.SerializeToString,
                response_deserializer=evolver__pb2.RegisterActorResponse.FromString,
                )
        self.PostReward = channel.unary_unary(
                '/EvolverService/PostReward',
                request_serializer=evolver__pb2.PostRewardToEvolverRequest.SerializeToString,
                response_deserializer=ndarray__pb2.Empty.FromString,
                )
        self.GetNNVariables = channel.unary_unary(
                '/EvolverService/GetNNVariables',
                request_serializer=ndarray__pb2.Empty.SerializeToString,
                response_deserializer=evolver__pb2.GetNNVariablesResponse.FromString,
                )


class EvolverServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Persistence(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterLearner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterActor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostReward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNNVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvolverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Persistence': grpc.stream_stream_rpc_method_handler(
                    servicer.Persistence,
                    request_deserializer=pingpong__pb2.Ping.FromString,
                    response_serializer=pingpong__pb2.Pong.SerializeToString,
            ),
            'RegisterLearner': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterLearner,
                    request_deserializer=evolver__pb2.RegisterLearnerRequest.FromString,
                    response_serializer=evolver__pb2.RegisterLearnerResponse.SerializeToString,
            ),
            'RegisterActor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterActor,
                    request_deserializer=ndarray__pb2.Empty.FromString,
                    response_serializer=evolver__pb2.RegisterActorResponse.SerializeToString,
            ),
            'PostReward': grpc.unary_unary_rpc_method_handler(
                    servicer.PostReward,
                    request_deserializer=evolver__pb2.PostRewardToEvolverRequest.FromString,
                    response_serializer=ndarray__pb2.Empty.SerializeToString,
            ),
            'GetNNVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNNVariables,
                    request_deserializer=ndarray__pb2.Empty.FromString,
                    response_serializer=evolver__pb2.GetNNVariablesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EvolverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EvolverService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Persistence(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/EvolverService/Persistence',
            pingpong__pb2.Ping.SerializeToString,
            pingpong__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterLearner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EvolverService/RegisterLearner',
            evolver__pb2.RegisterLearnerRequest.SerializeToString,
            evolver__pb2.RegisterLearnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EvolverService/RegisterActor',
            ndarray__pb2.Empty.SerializeToString,
            evolver__pb2.RegisterActorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostReward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EvolverService/PostReward',
            evolver__pb2.PostRewardToEvolverRequest.SerializeToString,
            ndarray__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNNVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EvolverService/GetNNVariables',
            ndarray__pb2.Empty.SerializeToString,
            evolver__pb2.GetNNVariablesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
